name: Build Release Binaries

on:
  push:
    tags:
      - 'v*'

jobs:
  macos:
    name: macOS Builds
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          npm ci
          cd client && npm ci
        working-directory: app

      - name: Build Client
        run: npm run build:client
        working-directory: app

      - name: Build Electron (${{ matrix.arch }})
        run: |
          rm -rf dist-electron
          npm run dist -- --mac --${{ matrix.arch }}
        working-directory: app

      - name: Upload macOS Artifact (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-artifacts
          path: app/dist-electron/**

  linux:
    name: Linux Builds
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          npm ci
          cd client && npm ci
        working-directory: app

      - name: Build Client
        run: npm run build:client
        working-directory: app

      - name: Build Electron (${{ matrix.arch }})
        run: |
          rm -rf dist-electron
          npm run dist -- --linux --${{ matrix.arch }}
        working-directory: app

      - name: Upload Linux Artifact (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-artifacts
          path: app/dist-electron/**

  windows:
    name: Windows Builds
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          npm ci
          cd client && npm ci
        working-directory: app

      - name: Build Client
        run: npm run build:client
        working-directory: app

      - name: Build Electron (${{ matrix.arch }})
        shell: pwsh
        run: |
          if (Test-Path dist-electron) { Remove-Item dist-electron -Recurse -Force }
          npm run dist -- --win --${{ matrix.arch }}
        working-directory: app

      - name: Upload Windows Artifact (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-artifacts
          path: app/dist-electron/**

  raspberry-pi:
    name: Raspberry Pi Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Raspberry Pi binaries
        run: |
          TAG="${{ github.ref_name }}"
          VERSION="${TAG#v}"

          # Create output directory
          mkdir -p releases/pi/

          # Build using Docker buildx
          docker buildx build -f .scripts/DockerfilePi . \
            --platform linux/arm64 \
            --target=artifact \
            --output type=local,dest=$(pwd)/releases/pi \
            --build-arg GITHUB_REF_NAME="${TAG}" \
            --build-arg GITHUB_REF_TYPE="tag" \
            --build-arg GIT_COMMIT_LOG="$(git log -1 --format='%ci %H %s')" \
            --no-cache

      - name: List built artifacts
        run: |
          echo "Built Raspberry Pi artifacts:"
          ls -lh releases/pi/

      - name: Upload Raspberry Pi Artifact
        uses: actions/upload-artifact@v4
        with:
          name: raspberry-pi-artifacts
          path: releases/pi/*

  release:
    name: Create Release
    needs: [macos, linux, windows, raspberry-pi]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare and rename release assets
        run: |
          mkdir -p release-assets
          TAG="${{ github.ref_name }}"

          echo "Downloaded artifacts structure:"
          find artifacts -type f

          # Rename and copy macOS x64 assets
          if [ -d "artifacts/macos-x64-artifacts" ]; then
            for file in artifacts/macos-x64-artifacts/*.dmg; do
              if [ -f "$file" ]; then
                ext="${file##*.}"
                cp "$file" "release-assets/ncSender_${TAG}_macos_x64.${ext}"
              fi
            done
          fi

          # Rename and copy macOS arm64 assets
          if [ -d "artifacts/macos-arm64-artifacts" ]; then
            for file in artifacts/macos-arm64-artifacts/*.dmg; do
              if [ -f "$file" ]; then
                ext="${file##*.}"
                cp "$file" "release-assets/ncSender_${TAG}_macos_arm64.${ext}"
              fi
            done
          fi

          # Rename and copy Linux x64 assets
          if [ -d "artifacts/linux-x64-artifacts" ]; then
            for file in artifacts/linux-x64-artifacts/*.{deb,AppImage,rpm}; do
              if [ -f "$file" ]; then
                ext="${file##*.}"
                cp "$file" "release-assets/ncSender_${TAG}_linux_x64.${ext}"
              fi
            done
          fi

          # Rename and copy Windows x64 assets
          if [ -d "artifacts/windows-x64-artifacts" ]; then
            for file in artifacts/windows-x64-artifacts/*.exe; do
              if [ -f "$file" ]; then
                cp "$file" "release-assets/ncSender_${TAG}_windows_x64.exe"
              fi
            done
          fi

          # Rename and copy Raspberry Pi assets
          if [ -d "artifacts/raspberry-pi-artifacts" ]; then
            for file in artifacts/raspberry-pi-artifacts/*.deb; do
              if [ -f "$file" ]; then
                cp "$file" "release-assets/ncSender_${TAG}_raspberry-pi_arm64.deb"
              fi
            done
            for file in artifacts/raspberry-pi-artifacts/*.AppImage; do
              if [ -f "$file" ]; then
                cp "$file" "release-assets/ncSender_${TAG}_raspberry-pi_arm64.AppImage"
              fi
            done
          fi

          echo "Release assets to upload:"
          ls -lh release-assets/

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            --repo ${{ github.repository }} \
            --title "Release ${{ github.ref_name }}" \
            --generate-notes \
            release-assets/*

  update-version:
    name: Update package.json version
    needs: [release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Update package.json version
        run: |
          TAG="${{ github.ref_name }}"
          VERSION="${TAG#v}"

          echo "Tag: $TAG"
          echo "Version (without v): $VERSION"

          # Update version in app/package.json
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" app/package.json

          # Show the change
          echo "Updated app/package.json:"
          grep -A 1 -B 1 "\"version\":" app/package.json

      - name: Commit and push version update
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add app/package.json

          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to package.json version - already up to date"
          else
            git commit -m "chore: bump version to $VERSION [skip ci]"
            git push origin main
          fi
