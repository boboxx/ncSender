name: Build Release Binaries

on:
  push:
    tags:
      - 'v*'

jobs:
  update-version:
    name: Update package.json version
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update package.json version
        run: |
          TAG="${{ github.ref_name }}"
          VERSION="${TAG#v}"

          echo "Tag: $TAG"
          echo "Version (without v): $VERSION"

          # Update version in app/package.json
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" app/package.json

          # Show the change
          echo "Updated app/package.json:"
          grep -A 1 -B 1 "\"version\":" app/package.json

      - name: Upload updated package.json
        uses: actions/upload-artifact@v4
        with:
          name: updated-package-json
          path: app/package.json

  macos:
    name: macOS Builds
    needs: [update-version]
    runs-on: macos-14  # macOS Sonoma (stable)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download updated package.json
        uses: actions/download-artifact@v4
        with:
          name: updated-package-json
          path: app/

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          npm ci
          cd client && npm ci
        working-directory: app

      - name: Build Client
        run: npm run build:client
        working-directory: app

      - name: Build Electron (x64 + arm64)
        run: |
          rm -rf dist-electron
          npm run dist -- --mac --x64 --arm64
        working-directory: app

      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: app/dist-electron/**

  linux:
    name: Linux Builds
    needs: [update-version]
    runs-on: ubuntu-22.04  # Ubuntu 22.04 LTS (stable)
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download updated package.json
        uses: actions/download-artifact@v4
        with:
          name: updated-package-json
          path: app/

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          npm ci
          cd client && npm ci
        working-directory: app

      - name: Build Client
        run: npm run build:client
        working-directory: app

      - name: Build Electron (${{ matrix.arch }})
        run: |
          rm -rf dist-electron
          npm run dist -- --linux --${{ matrix.arch }}
        working-directory: app

      - name: Upload Linux Artifact (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-artifacts
          path: app/dist-electron/**

  windows:
    name: Windows Builds
    needs: [update-version]
    runs-on: windows-2022  # Windows Server 2022 (stable)
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download updated package.json
        uses: actions/download-artifact@v4
        with:
          name: updated-package-json
          path: app/

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          npm ci
          cd client && npm ci
        working-directory: app

      - name: Build Client
        run: npm run build:client
        working-directory: app

      - name: Build Electron (${{ matrix.arch }})
        shell: pwsh
        run: |
          if (Test-Path dist-electron) { Remove-Item dist-electron -Recurse -Force }
          npm run dist -- --win --${{ matrix.arch }}
        working-directory: app

      - name: Upload Windows Artifact (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-artifacts
          path: app/dist-electron/**

  raspberry-pi:
    name: Raspberry Pi Build
    needs: [update-version]
    runs-on: ubuntu-22.04  # Ubuntu 22.04 LTS (stable)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download updated package.json
        uses: actions/download-artifact@v4
        with:
          name: updated-package-json
          path: app/

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libfuse2 \
            rpm \
            fakeroot \
            ruby \
            ruby-dev \
            rubygems \
            build-essential
          sudo gem install --no-document fpm

      - name: Install Dependencies
        run: |
          npm ci
          cd client && npm ci
        working-directory: app

      - name: Build Client
        run: npm run build:client
        working-directory: app

      - name: Build Electron (Raspberry Pi ARM64)
        run: |
          rm -rf dist-electron
          npm run dist -- --linux --arm64
        working-directory: app
        env:
          USE_SYSTEM_FPM: "true"

      - name: List built artifacts
        run: |
          echo "Built Raspberry Pi artifacts:"
          ls -lh app/dist-electron/

      - name: Upload Raspberry Pi Artifact
        uses: actions/upload-artifact@v4
        with:
          name: raspberry-pi-artifacts
          path: |
            app/dist-electron/*.deb
            app/dist-electron/*.AppImage

  release:
    name: Create Release
    needs: [macos, linux, windows, raspberry-pi]
    runs-on: ubuntu-22.04  # Ubuntu 22.04 LTS (stable)
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets (preserve electron-builder filenames)
        run: |
          mkdir -p release-assets
          TAG="${{ github.ref_name }}"

          echo "Downloaded artifacts structure:"
          find artifacts -type f

          copy_matching_files() {
            local source_dir="$1"
            shift
            if [ ! -d "$source_dir" ]; then
              return
            fi
            for pattern in "$@"; do
              find "$source_dir" -maxdepth 1 -type f -name "$pattern" -print -exec cp {} release-assets/ \;
            done
          }

          # macOS assets (keep default names for auto-updater compatibility)
          copy_matching_files "artifacts/macos-artifacts" "*.dmg" "*.pkg" "*.zip" "*.blockmap" "latest-mac.yml"

          # Windows assets
          copy_matching_files "artifacts/windows-x64-artifacts" "*.exe" "*.msi" "*.zip" "*.blockmap" "latest.yml"

          # Linux assets
          copy_matching_files "artifacts/linux-x64-artifacts" "*.AppImage" "*.deb" "*.rpm" "*.tar.gz" "latest-linux.yml"

          # Raspberry Pi assets
          copy_matching_files "artifacts/raspberry-pi-artifacts" "*.AppImage" "*.deb"

          echo "Release assets to upload:"
          ls -lh release-assets/

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            --repo ${{ github.repository }} \
            --title "Release ${{ github.ref_name }}" \
            --generate-notes \
            release-assets/*

  commit-version:
    name: Commit version update to main
    needs: [release]
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Download updated package.json
        uses: actions/download-artifact@v4
        with:
          name: updated-package-json
          path: app/

      - name: Commit and push version update
        run: |
          TAG="${{ github.ref_name }}"
          VERSION="${TAG#v}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add app/package.json

          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to package.json version - already up to date"
          else
            git commit -m "chore: bump version to $VERSION [skip ci]"
            git push origin main
          fi
