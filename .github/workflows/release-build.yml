name: Build Release Binaries

on:
  push:
    tags:
      - 'v*'

jobs:
  macos:
    name: macOS Builds
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          npm ci
          cd client && npm ci
        working-directory: app

      - name: Build Client
        run: npm run build:client
        working-directory: app

      - name: Build Electron (${{ matrix.arch }})
        run: |
          rm -rf dist-electron
          npm run dist -- --mac --${{ matrix.arch }}
        working-directory: app

      - name: Upload macOS Artifact (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-artifacts
          path: app/dist-electron/**

  linux:
    name: Linux Builds
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          npm ci
          cd client && npm ci
        working-directory: app

      - name: Build Client
        run: npm run build:client
        working-directory: app

      - name: Build Electron (${{ matrix.arch }})
        run: |
          rm -rf dist-electron
          npm run dist -- --linux --${{ matrix.arch }}
        working-directory: app

      - name: Upload Linux Artifact (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-artifacts
          path: app/dist-electron/**

  windows:
    name: Windows Builds
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          npm ci
          cd client && npm ci
        working-directory: app

      - name: Build Client
        run: npm run build:client
        working-directory: app

      - name: Build Electron (${{ matrix.arch }})
        shell: pwsh
        run: |
          if (Test-Path dist-electron) { Remove-Item dist-electron -Recurse -Force }
          npm run dist -- --win --${{ matrix.arch }}
        working-directory: app

      - name: Upload Windows Artifact (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-artifacts
          path: app/dist-electron/**

  # raspberry-pi:
  #   name: Raspberry Pi Build
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'

  #     - name: Install Dependencies
  #       run: |
  #         npm ci
  #         cd client && npm ci
  #       working-directory: app

  #     - name: Build Client
  #       run: npm run build:client
  #       working-directory: app

  #     - name: Build Electron (Raspberry Pi)
  #       run: |
  #         rm -rf dist-electron
  #         npm run dist -- --linux --armv7l
  #       working-directory: app

  #     - name: Upload Raspberry Pi Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: raspberry-pi-artifacts
  #         path: app/dist-electron/**

  release:
    name: Create Release
    needs: [macos, linux, windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare and rename release assets
        run: |
          mkdir -p release-assets
          TAG="${{ github.ref_name }}"

          echo "Downloaded artifacts structure:"
          find artifacts -type f

          # Rename and copy macOS x64 assets
          if [ -d "artifacts/macos-x64-artifacts" ]; then
            for file in artifacts/macos-x64-artifacts/*.{dmg,zip}; do
              if [ -f "$file" ]; then
                ext="${file##*.}"
                cp "$file" "release-assets/ncSender_${TAG}_macos_x64.${ext}"
              fi
            done
          fi

          # Rename and copy macOS arm64 assets
          if [ -d "artifacts/macos-arm64-artifacts" ]; then
            for file in artifacts/macos-arm64-artifacts/*.{dmg,zip}; do
              if [ -f "$file" ]; then
                ext="${file##*.}"
                cp "$file" "release-assets/ncSender_${TAG}_macos_arm64.${ext}"
              fi
            done
          fi

          # Rename and copy Linux x64 assets
          if [ -d "artifacts/linux-x64-artifacts" ]; then
            for file in artifacts/linux-x64-artifacts/*.{deb,AppImage,rpm}; do
              if [ -f "$file" ]; then
                ext="${file##*.}"
                cp "$file" "release-assets/ncSender_${TAG}_linux_x64.${ext}"
              fi
            done
          fi

          # Rename and copy Windows x64 assets
          if [ -d "artifacts/windows-x64-artifacts" ]; then
            for file in artifacts/windows-x64-artifacts/*.exe; do
              if [ -f "$file" ]; then
                cp "$file" "release-assets/ncSender_${TAG}_windows_x64.exe"
              fi
            done
          fi

          echo "Release assets to upload:"
          ls -lh release-assets/

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            --repo ${{ github.repository }} \
            --title "Release ${{ github.ref_name }}" \
            --generate-notes \
            release-assets/*
