FROM node:20-bullseye AS builder
ARG NODE_OPTIONS="--max-old-space-size=8192"
ARG USE_SYSTEM_FPM="true"
ARG GITHUB_REF_NAME
ARG GITHUB_REF_TYPE
ARG GIT_COMMIT_LOG

# Install dependencies needed for Electron builds
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        libfuse2 \
        rpm \
        fakeroot \
        dpkg \
        libc6 \
        libgcc-s1 \
        libstdc++6 \
        ruby \
        ruby-dev \
        rubygems \
        build-essential \
    && gem install --no-document fpm \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /
COPY . .

WORKDIR /app/client
RUN npm ci
WORKDIR /app
RUN npm ci
RUN npm run build:client
RUN rm -rf dist-electron
RUN npm run dist -- --linux --arm64

# rename package to PI-64Bit
# RUN for f in /app/output/*.deb; do mv "$f" "$(echo "$f" | sed s/arm64/PI-64Bit/)"; done
# RUN for f in /app/output/*.AppImage; do mv "$f" "$(echo "$f" | sed s/arm64/PI-64Bit/)"; done

# # copy to release
# RUN mkdir -p release/pi/
# RUN for f in /app/output/*.deb; do cp -af "$f" "$(echo "$f" | sed s/output/release\\/pi/)"; done
# RUN for f in /app/output/*.AppImage; do cp -af "$f" "$(echo "$f" | sed s/output/release\\/pi/)"; done

# RUN  if [[ "$GITHUB_REF_TYPE" == "branch" && "$GITHUB_REF_NAME" == "master" ]]; then \
#         yarn github-release delete \
#             --owner=gSender \
#             --repo=gsender \
#             --tag="${GITHUB_REF_NAME}-latest" \
#             --release-name="${GITHUB_REF_NAME}" \
#             "*-pi*"; \
#         yarn github-release upload \
#             --owner=gSender \
#             --repo=gsender \
#             --tag="${GITHUB_REF_NAME}-latest" \
#             --release-name="${GITHUB_REF_NAME}" \
#             --body="${GIT_COMMIT_LOG}" \
#             releases/pi/*; \
#     fi

FROM scratch AS artifact
COPY --from=builder /app/dist-electron/*.deb .
COPY --from=builder /app/dist-electron/*.AppImage .
